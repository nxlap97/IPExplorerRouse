@inherits WebViewPage<Umbraco.Forms.Web.Models.FormViewModel>
    @using ClientDependency.Core.Mvc
    @using Umbraco.Forms.Mvc.BusinessLogic
    @using Umbraco.Forms.Mvc

    @*
    This view is used as the default render view for all forms, unless a theme
    is chosen, which contains a override of render.cshtm
    Normally, you would not need to override this view, as you would have to
    replicate all functionality of this view seperately
    *@

    @{
    Html.EnableClientValidation(true);
    Html.EnableUnobtrusiveJavaScript(true);

    //Get the actual view to render the form html
    var formThemedView = FormThemeResolver.GetFormView(Model);

    //get the script.cshtml view to render client-side assets
    var formScriptView = FormThemeResolver.GetScriptView(Model);

    }

    @* In case the form has been marked as submitted - the FormThemeResolver will return the submitted.cshtml file and look for a custom
    view. In case there is no view found - it will default to /themes/default/submitted which will just display the standard message
    *@
    @if (Model.SubmitHandled)
    {
    @Html.Partial(formThemedView);

    } else {

    @*Standard form and wrapper *@
    <div id="umbraco_form_@Model.FormClientId" class="umbraco-forms-form @Model.CssClass umbraco-forms-@Model.Theme">

        @using (Html.BeginUmbracoForm<Umbraco.Forms.Web.Controllers.UmbracoFormsController>
            ("HandleForm", null, new { id= Model.FormId }, FormMethod.Post))
            {
            @* Standard form meta data *@

            @Html.AntiForgeryToken()

            @Html.HiddenFor(x => Model.FormId, new {id = (string)null})
            @Html.HiddenFor(x => Model.FormName, new {id = (string)null})
            @Html.HiddenFor(x => Model.RecordId, new {id = (string)null})
            @Html.HiddenFor(x => Model.PreviousClicked, new {id = (string)null})
            @Html.HiddenFor(x => Model.Theme, new {id = (string)null})

            @* These 2 cannot use the htmlhelper *@
            <input type="hidden" name="FormStep" value="@Model.FormStep" />
            <input type="hidden" name="RecordState" value="@Model.RecordState" />

            @* Render the form html *@
            @Html.Partial(formThemedView)
            }


            @* Form Scripts *@
            @if (Model.RenderScriptFiles)
            {
            @* Render the scripts.cshtml file to included standard conditionals and validation logic *@
            Html.RenderPartial(formScriptView);
            }
    </div>
    }


    <script type="text/javascript">
        $(document).ready(function () {
            //Intercept Submit button in order to make ajax call instead of a postback
            $('#@Model.FormId').preventDoubleSubmission();
        })

        // jQuery plugin to prevent double submission of forms
        jQuery.fn.preventDoubleSubmission = function () {
            $(this).on('submit', function (e) {
                e.preventDefault();
                console.log('nhap');
                var $form = $(this);
                console.log($form);

                if ($form.data('submitted') === true) {
                    // Previously submitted - don't submit again
                } else {
                    if ($form.valid()) {
                        // Mark it so that the next submit can be ignored
                        $form.data('submitted', true);

                        // Make ajax call form submission
                        $.ajax({
                            url: $form.attr('action'),
                            type: 'POST',
                            cache: false,
                            data: $form.serialize(),
                            success: function (result) {

                                console.log(result);

                                var thankYouMessage = $(result).find('.umbraco-forms-submitmessage');
                                $('#submit-result').html(thankYouMessage);
                                //ToDo: Add code to replace html inside the div that holds the form with a Success message.
                            }
                        });
                    }
                }
            });

            // Keep chainability
            return this;
        };
    </script>
