@using ContentModels = Umbraco.Web.PublishedModels;
@inherits Umbraco.Web.Mvc.UmbracoViewPage
@using System.Text.RegularExpressions
@{
	 var space = ", ";
	 IEnumerable<IPublishedElement> authorList; 
	 
    var pageSize = 10;
    var searchQuery = Server.UrlDecode(Request.QueryString["tag"]);
    var page = Convert.ToDouble(Request.QueryString["page"]);
    long resultCount = 0;
    System.Collections.Generic.IEnumerable<Umbraco.Core.Models.PublishedContent.IPublishedContent>  results ;


    if (!string.IsNullOrWhiteSpace(searchQuery))
    {   
       
        results = Umbraco.TagQuery.GetContentByTag(searchQuery).Where(x => x.ToString() =="Umbraco.Web.PublishedModels.News")
	              .OrderByDescending(x => x.CreateDate).Take(9); 
        resultCount = results != null && results.Any() ? results.Count() : 0;
       
    }
    
       results = Umbraco.TagQuery.GetContentByTag(searchQuery).Where(x => x.ToString() =="Umbraco.Web.PublishedModels.News")
	              .OrderByDescending(x => x.CreateDate).Take(9); 
        resultCount = results != null && results.Any() ? results.Count() : 0;
        
        
    var totalPages = (int)Math.Ceiling((double)resultCount / (double)pageSize);
    if (page > totalPages)
    {
        page = totalPages;
    }
    else if (page < 1)
    {
        page = 1;
    }
      
    var contentDescrition  = "";
    var countItem = 1;
     var open ="<div class='item'>";
        var close = "</div>";
}

@functions {
 public static int CountWord(string content)
{
    string pattern = "[^\\w]";
  
    string[] words = null;
    int i = 0;
    int count = 0;
  
    words = Regex.Split(content, pattern, RegexOptions.IgnoreCase);
    for (i = words.GetLowerBound(0); i <= words.GetUpperBound(0); i++) {
        if (words[i].ToString() == string.Empty) {
         count = count - 1;
        }
           
        count = count + 1;
    }
    
    return count;
    
  
}

public static string StripHTML(string input)
{
   return Regex.Replace(input, "<.*?>", String.Empty);
}

public static string EstimateTimeToRead(int number)
{
    
    int wordPerMin = 250; 
    int result = number/wordPerMin;
    
    if (result == 0 ) {
        result =  1;
    }
    
    if (result > 10) {
        result = result - 3;
    } 
    
    if (result > 1) {
        return result + " minute read";
    
    } else {
         return result + " minute read";
    }
}
}

				<div id="search-results-page">
				
                   
                     <section class="image-content-box-section blog-network-section ip-portfolio-blogs-section filter-insight" id="filterInsightResult">
            				<div class="container">
            					<div class="section-content">
            						<div class="section-title">
            							<h3>Articles tagged as <span class="tag-keyword">@searchQuery </span></h3>
            						</div>
            				            	@{
            						             countItem = 1;
            						         }
            					
                                            	<div class="row" id="filterInsightResult">
            						
            @if (resultCount > 0 ) {
            
                  
                    foreach (var item in results.Skip(((int)page - 1) * pageSize).Take(pageSize)) {
                    
                  var title ="";  
    		      var newsSummary = "";
    		         var tempString = "";
    		       try {
    		           title =  (item.Value("newsTitle").ToString().Length > 80) ? item.Value("newsTitle").ToString().Substring(0,80) : item.Value("newsTitle").ToString();
    		             tempString =  StripHTML(item.Value("newsSummary").ToString());
    		           
    		           newsSummary =  (tempString.ToString().Length > 120) ? tempString.Substring(0,120) : tempString;
    		       } catch (Exception e) {
    		              
    		       }
                    
                    
            						               var mod = (int)(countItem % 3);
            						                 var countAuthor = 0; 
            						               	  var publishedDate = "";
	  publishedDate= (item.Value<System.DateTime>("publishedDate").ToString("dd MMM yyyy", null) != "01 Jan 0001") ? item.Value<System.DateTime>("publishedDate").ToString("dd MMM yyyy", null) : item.CreateDate.ToString("dd MMM yyyy", null);
			
            						               var imageNews ="";
            						                try {
                            if (item.Value<IPublishedContent>("newsImage") != null)
                            {

                                if (item.Value<IPublishedContent>("newsImage").GetCropUrl("InsightsItem") != null)
                                {
                                    imageNews = item.Value<IPublishedContent>("newsImage").GetCropUrl("InsightsItem").ToString();
                                }
                                else
                                {
                                    imageNews = item.Value<IPublishedContent>("newsImage").Url.ToString();
                                }
                            }

                        } catch (Exception e)
                        {
                            imageNews = "";

                        }
            						               
            						           
            						                 <!-- A Item  -->
    	<div class="col-xs-12 col-md-12 col-lg-4 item item-news" style="background-image:url('@imageNews')">
    		<div class="item-content item-content-news">
    			<div class="title"><a href="@item.Url">@title</a></div>
    			  @if (item.Value("newsSummary") != "" && item.Value("newsSummary") != null && item.Value("newsSummary").ToString().Length > 0){
                                            <div class="description">
                                                 @Html.Raw(newsSummary)
                                            </div>
                                            } 
    			<p class="time">@EstimateTimeToRead(CountWord(item.Value("newsContent").ToString()))</p>
    		
    			  <p class="author">
                     @{
                          
                             countAuthor = 0; 
                             
                             authorList  = item.Value<IEnumerable<IPublishedElement>>("newsAuthor");
                                if (authorList != null ) {
                                    countAuthor =  authorList.Count();
                              }                     
                     }
                    @if (countAuthor > 0 ) {
                      foreach (IPublishedContent author in authorList.Take(2) ) {
                      var urlImage = ""; 
                      try {
                          if ( author.Value<IPublishedContent>("profileImage") != null)
                         {
                                urlImage = author.Value<IPublishedContent>("profileImage").Url;
                                                        
                         }
                      } catch (Exception e) {
                            urlImage = ""; 
                      }
                   
                         if (author != authorList.First()) {
                            @space  @author.Value("profileName")
                         } else {
                             @author.Value("profileName")
                         }
                         
                          
                    }
                    }
                </p>
                
    			<a href="@item.Url" class="readmore">READ MORE <i class="fas fa-chevron-right arrow arrow-1"></i><i class="fas fa-chevron-right arrow arrow-2"></i><i class="fas fa-chevron-right arrow arrow-3"></i></a>
    			<p class="datetime">@publishedDate</p>
    			<ul class="tags-list"> @*hash tag filter*@
                          
                             @foreach (var tag in item.Value<string[]>("newsHashtag").Take(3)) {
                                string[] words = tag.Split(' ');
                                int number = words.Length;
                                List<string> wordLast = new List<string>();
                                for (int i = 0; i < number; i++)
                                {
                                    string a=  words[i].Substring(0, 1).ToUpper() + words[i].Substring(1)+"+";
                                    wordLast.Add(a);
                                }
                                string combindedString = string.Join(Environment.NewLine, wordLast);
                             <li><a href="/insights?tag=@(combindedString.Remove(combindedString.Length-1,1))">#@tag.ToLower() </a></li>
                            }
                          
                </ul>
    		</div>
    	</div>
        <!-- End Item -->
            						                 
            						            
            						               
            						               
            						               countItem++;
            				
            						           }
            }						         	
            						           
            						   </div>
                                  
            				</div>	
                    </section>
						
			
			
			

